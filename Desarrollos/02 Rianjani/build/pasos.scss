/* Pasos para crear del grid

  1.- Crear una carpeta dentro sass llamada grid
  2.- Crear un archivo llamado variables.scss

///////////////////////////////////////////////
// Main.scss
///////////////////////////////////////////////

  3.- Importar archivo variables.scss

  // Importar Grid
    @import "grid/variables";

///////////////////////////////////////////////
// variables.scss
///////////////////////////////////////////////

  ----> Variable que remplaza a su valor por default en el archivo config.scss
  4.- $cssHelpers: true;
  @import "main-grid";

-------------------------------------------------

  5.- Crear dos archivos: config.scss y main-grid.scss

///////////////////////////////////////////////
// main-grid.scss
///////////////////////////////////////////////

  6.- Importar archivo config.scss

///////////////////////////////////////////////
// config.scss
///////////////////////////////////////////////

  7.- Agregar contenido

    @import "components/functions";

$cssCore    : true  !default;
$cssHelpers : true  !default;
$devMode    : false !default;

// flex-container and flex-item
$container : ed-container !default;
$item      : ed-item !default;

// Max width of containers
$max-width : 1200px !default;

// Gutter between same line items
// Total gutter between items is $gutter * 2
$gutter : em(15px) !default;

// Breakpoints
$breakpoints : (
  s  : 0,
  m  : 640px,
  l  : 1024px,
  xl : 1440px
) !default;

----------------------------------------------------

  8.- Crear carpeta components con un archivo llamado functios

///////////////////////////////////////////////
// functions.scss
///////////////////////////////////////////////

  9.- Crear funciones de em y rem

    @function em($el,$context:16px) {
      @if type_of($el) == number and unit($el) == 'px' {
        @return ($el / $context) * 1em;
      } @else {
        @error 'La funci√≥n em() requiere una unidad de pixeles como primer argumento (el segundo es opcional)'
      }
    }

    @function rem($el) {
      @if type_of($el) == number and unit($el) == 'px' {
        @return ($el / 16px) * 1rem;
      } @else {
        @error 'La funcion rem() requiere una unidad de pixeles como argumento';
      }
    }

------------------------------------------------------

  10.- crear archivos core y css dentro de components

///////////////////////////////////////////////
// main-grid.scss
///////////////////////////////////////////////

  11.- Importar archivos core y css

    @import "components/core";
    @import "components/css";


///////////////////////////////////////////////
// core.scss
///////////////////////////////////////////////

  12.- Variables y mixinin para crear las claes

    .ed-container {
      display      : flex;
      flex-wrap    : wrap;
      max-width    : $max-width;
      margin-left  : auto;
      margin-right : auto;
      width        : 100%;
    }

    .ed-item {
      margin        : 0;
      padding-left  : $gutter;
      padding-right : $gutter;
    }

    // Breakpoints
    @mixin coreGrid(){

      ----size = a las letras (s, m, l, xl) y screen-size = son las medidas (320, 640, 1024, 1440)

      @each $size, $screen-size in $breakpoints{
        // porcentajes
        @media all and (min-width: $screen-size){
          @for $i from 1 through 20 {
            .#{$size}#{$i*5},

            ---.#{$item} es la variable que viene de config

            .#{$item}.#{$size}#{$i*5}{
              width: unquote($i*5 + "%");
            }
          }
        }
      }
    }

///////////////////////////////////////////////
// css.scss
///////////////////////////////////////////////

  13.- Mandar llamar el mixin

    @if $cssHelpers == true {
      @include coreGrid();
    }

-----------------------------------------------

  14.- Crear archivo _dev.scss

///////////////////////////////////////////////
// dev.scss
///////////////////////////////////////////////

  15.- Agregar estilos

    // altura de los pseudoelementos que imprimiran clases
    $infoHeight : rem(20px);
    $infoFontSize : $infoHeight * 0.6;

    %info {
      content     : attr(class);
      font-style  : italic;
      font-size   : $infoFontSize;
      font-weight : normal;

      z-index     : 1;
      right       : 0;
      position    : absolute;

      display     : table;
      width       : 100%;
      padding     : 0 em(5px);
      height      : $infoHeight;
      line-height : $infoHeight;
    }

    @mixin devModeContainer {
      padding-top   : $infoHeight;
      margin-bottom : 10px;
      outline       : 1px solid tomato;
      position      : relative;

      .#{$container} { margin-bottom : 0 }

      &:before {
        @extend %info;
        top        : 0;
        background : rgba(tomato, .3);
        color      : tomato;
      }
    }

    @mixin devModeItem {
      position         : relative;
      padding-bottom   : $infoHeight;
      background-color : rgba(yellow, .3);
      background-clip  : content-box;

      &:before {
        @extend %info;
        background : rgba(steelblue, .8);
        color      : #FFF;
        bottom     : 0;
      }

      &:nth-child(even):before {
        background : rgba(steelblue, .4);
        color      : steelblue;
      }
    }

    @mixin devMode() {
      margin   : 0 !important;
      position : relative;
      top      : 66px;

      &:before {
        @extend %info;
        position    : fixed;
        background  : steelblue;
        color       : #FFF;
        font-size   : $infoHeight * 0.7;
        text-align  : center;
        line-height : 36px;
        height      : 36px;
      }

      @each $size, $screen-size in $breakpoints {
        @include from($size) {
          &:before {
            content : "ed-grid: size #{$size}, from #{$screen-size} (ed-containers: red, ed-items: blue, yellow)";
          }
        }
      }
    }

    @if $devMode == true {
      body {
        @include devMode();
      }
    }

///////////////////////////////////////////////
// main-grid.scss
///////////////////////////////////////////////


*/
